{"version":3,"sources":["logo.svg","Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Portfolio","className","Component","App","state","toggle","setState","style","color","src","alt","width","height","position","right","top","logo","maxWidth","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,kC,4MCEtBC,G,uLAEjB,OACE,6BACA,6BAASC,UAAU,iB,GAJcC,cC4FxBC,E,2MAtEbC,MAAQ,CACNC,QAAQ,G,EAEVA,OAAS,WACP,EAAKC,SAAS,CACZD,QAAS,EAAKD,MAAMC,U,wEAIvB,OACE,yBAAKJ,UAAU,OACd,4BAAQA,UAAU,aAAaM,MAAO,CAACC,MAAM,UAC5C,yBAAKC,IAAI,6FAA6FC,IAAI,OAAOH,MAAO,CAACI,MAAM,OAAOC,OAAO,OAAOC,SAAS,WAAWC,MAAM,IAAIC,IAAI,OAGnL,yBAAKN,IAAKO,IAAMf,UAAU,WAAWS,IAAI,UAG7C,8CACA,2DAIF,yBAAKT,UAAU,QACd,4BAAQA,UAAU,eACjB,yBAAKA,UAAU,eAAeQ,IAAI,+DAA+DC,IAAI,UACrG,oCACC,wBAAIH,MAAO,CAACU,SAAS,SAArB,UAAuC,0BAAMV,MAAO,CAACC,MAAM,SAApB,WACvC,2BAEC,uBAAGU,KAAK,KAAI,uBAAGjB,UAAU,oCACzB,uBAAGiB,KAAK,KAAI,uBAAGjB,UAAU,kCACzB,uBAAGiB,KAAK,KAAI,uBAAGjB,UAAU,wCAMzB,yBAAKA,UAAU,WAEnB,yBAAKA,UAAU,QACd,4BAAQA,UAAU,gBACjB,yBAAKA,UAAU,eAAeQ,IAAI,+DAA+DC,IAAI,UACrG,oCACC,0CAAe,wCACf,6BACC,4DACA,+DACA,gEAED,uBAAGQ,KAAK,KAAR,iBASP,4BAAQjB,UAAU,gBAAlB,gBAKA,kBAAC,EAAD,W,GAjEkBC,aCXEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.09935ffa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.91bac596.svg\";","import React, { Component } from 'react'\n\nexport default class Portfolio extends Component {\n  render() {\n    return (\n      <div>\n      <section className='section'></section>\n    </div>\n    )\n  }\n}\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import Movie from './Movie';\nimport Portfolio from './Portfolio';\n\n\n// const movies = [{\n\n// id:1,\n// title:\"spaceJam 1\"\n// },\n// {\n//  id:2,\n//  title:\"spaceJam 2\" \n// },{\n//   id:3,\n//   title:\"spaceJam 3\" \n//  },{\n//   id:4,\n//   title:\"spaceJam 4\" \n//  }];\n\nclass App extends Component {\n  state = {\n    toggle: true\n  }\n  toggle = () =>{\n    this.setState({\n      toggle: !this.state.toggle\n    })\n  }\n  render() { \n   return (\n     <div className=\"App\">\n      <header className=\"App-header\" style={{color:'green'}}>\n       <img src=\"https://dl3.pushbulletusercontent.com/M0jBTVj69kTX1ugkXQwUq4VYSmh8EI18/innerGherodrop3.jpg\" alt=\"blob\" style={{width:'32vw',height:'auto',position:'absolute',right:'0',top:'0'}}/>\n        \n        {/*Company Logo */}\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n         \n       </header> \n      <h1>Logan J Wilson</h1>\n      <h2>Front End Software Engineer</h2>\n      \n    {/* REFACTOR THIS and iterate over when  have time*/}\n\t\t\t\n\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t<figure className=\"effect-kira\">\n\t\t\t\t\t\t<img className='fullWidthImg' src=\"https://tympanus.net/Development/HoverEffectIdeas/img/17.jpg\" alt=\"img17\"/>\n\t\t\t\t\t\t<figcaption>\n\t\t\t\t\t\t\t<h2 style={{maxWidth:'88vw'}}>My &nbsp;<span style={{color:'#49f'}}>Resume</span></h2>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<a href=\"#\"><i className=\"fa fa-fw fa-download iconLogan\"></i></a>\n\t\t\t\t\t\t\t\t<a href=\"#\"><i className=\"fa fa-fw fa-github iconLogan\"></i></a>\n\t\t\t\t\t\t\t\t<a href=\"#\"><i className=\"fa fa-fw fa-envelope iconLogan\"></i></a>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</figcaption>\t\t\t\n\t\t\t\t\t</figure>\n\t\t\t\t</div>\n\n        <div className=\"content\">\n\t\n\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t<figure className=\"effect-julia\">\n\t\t\t\t\t\t<img className='fullWidthImg' src=\"https://tympanus.net/Development/HoverEffectIdeas/img/21.jpg\" alt=\"img21\"/>\n\t\t\t\t\t\t<figcaption>\n\t\t\t\t\t\t\t<h2>Passionate <span>Julia</span></h2>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p>Julia dances in the deep dark</p>\n\t\t\t\t\t\t\t\t<p>She loves the smell of the ocean</p>\n\t\t\t\t\t\t\t\t<p>And dives into the morning light</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<a href=\"#\">View more</a>\n\t\t\t\t\t\t</figcaption>\t\t\t\n\t\t\t\t\t</figure>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\n\t\t\t</div>\n\n\n<button className=\"floating-btn\">\n\tGet in Touch\n</button>\n\n\n<Portfolio />\n     </div>\n   );\n  }\n}\n\nexport default App;\n{/* */}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}